{"basic_builder": {"appname": "TA-dell-emc-networker-add-on-for-splunk", "friendly_name": "Dell EMC Networker Add-on for Splunk", "version": "1.0.0", "author": "Kyle Prins", "description": "", "theme": "#0076CE", "large_icon": "", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAJBElEQVRYR7WYeYxV1R3HP+fce98282ZldoYZw7DJNmJo2QQNLsG6pKm1pk3Uomm1bmk1qTFpWpWaJsYa01ZN4xKtTRu1WlstOlgQUUQFQYQBB9AZR5hh9uVtdz3Nee8NMpMaHq2ef+59993zO9/7Pb/f9/c7P6GUUpwYCgIfTxoY+AgEColQAlAgAnwkRgAIgSt8LGXkZgs9FzwpMJVPIAyEfqDnTdjBQyiTQCikfl1fkV8snzVzEqAJZFlDSqJxBHmDE7MMBUr4iMBASZVd1MdAou81cA1C5nFkX85OzV1U7uOEB4GJLxUa9sljEiAfMJQLysKXQXYZAm3UQwmLLJdSk+PgBCZhIfCEQDoOXsgipLzsXOUrVOAjw0YWn1IBSgiEzLEh9LM8LqxJeCYzNAqMpRT1QrBreJiDx8ZJu4LFZ0znYNdxfM8nXlbElbOLef5AD1csqGdvb4aWqihPbv+EWTPqWNVk8syOY9RVxrl4TiVHkwF1RQYv7x0kmfSwgxQXLayhrSvJ2nlVNMoAmQea2/n8lgVBwKiU3P5cB098ZxZ/OjiCQSmXz7QJmZJD42FmlsIb7QNcML+YG57t5f4rm7nn1aM0V5dy45IYHw0FzCs3efFAH+fOqiKjBB/bPgf2HOfmc+o5koTGKBwdHqe6Ms6Dm7r5+dpGIlITn9vqSYAyUrCxa5iLGyp4vL0fT1VwwyJJBNgzLJhf4TPuSsKWYENbNz+7oJEbHn0PL5C8cOMSMhK2dWX4vG+Aq5c2cmBEMWoq+j5NcMWsIvYpk5ZomoN9grmVkod2JLl1RTlhkfWEfGycxFBCSQID2o877DnSy+vdMVqMz9nw7QW0D5u0TnPwAsFhz6JzIMHAcZtDx8Z483APm29Zlo20+94aYUdHN5UCHlnfykMfOtw038SUDre8NEB89HOuvmg+G/6+j3WL6rl2ZRM6TidcezJDQoe5Ys2dT3L1JeeTsOLctawkGzEf9MPCagMTwX1bO7n+nGa++8BWHrz2bK57qI33f3k5wjB4+ZMEXUe7+dvGd9i04Sq2j1rc++g/ee2OVex3q2kNjbN7CJqqi/moJ8Oa+hAqKxH/haEeJSmS0DXi8MrOIww7JdxyXi01UYM9x+EbVTpCfKbf8y867l7HnDue58MHruIf7QOsnTuNvZ8OccHMCh5sO8Sly5spj1nsHnRRY0lWtZSxY1jRGBX09qdY1hhl5e1P8Pb91xExtC7psJvi1J6QSM9H4dE/kmbnuEUoFmZFrUnahWqVRpgGbV0O59XDB4OCxXURIvYYj+9Ns/SMKhZMM/lsyKE2HrDzaJK5Myop8Ry27O/Aqz6TUCZJ64xiKkWGXifGtCIwCU4I5CQdyjp6NvbAE1qH9G5JpO+BMLPaoYSHDPS9jxCK0YwgbCjClkQEAlsKLL1AoIU1QIgJdw3IoANEi6LWNgMMF59wNsKE0gI3Val1dkCDATMrcmZOcQ0373Zat7Uih1H5MPUchzcHPdZWh0HauCKWVW9TL6B0KslF0En5iZza557pFKLEhIJPAZSjRy8lkFqxtTrnoUxcwUcpiRA2qAh4CeY/eojXf3IWdcImEFZeU8wciJxr5FOJzgX6Nu/E+Szzpaljsoh/+a+cUuQSpR5n/uE98Bx23baKkPgCwdQ8VYj9yT5UyAz9hUoRKIXherghwYKHP8BRMeLjney681IslcaRUUIF2vu/GdIGfDfF+/0utz79OqPRJhwpCAJYZvbw5PWriYRKkJMTeUHwTpuhbCAGih89vY3NYyUo08RXDuHAww3CqMQwf/3+HJY11XEiwAqCMkUYC5mTdWzH5ddvHeGxj9IoaWM6Bn4ohBAuRb7Ns+tXgmszXTjEy+OFmJ30zmkxpGPE9mHeI+8ReBGKjQRNsTAHMopQYLP5phXUBw4DbgjpBFSV5qvJ04B1WoB0ZF34wGscCjVQX2zRWilY3dLArzYfZP3qFtbEbGZMryYaNgjbTjbAIxFdKxQ+CgI0oUEe0Py7XTTF4JpFdcyuLUWlbZ7a2c+6uZKBcC2plENHdx/3XjKXGisXkScXYKeCVhAgDcRUMKpgyWN7WVAMv714AYmMw2fjSY6PJEn5Hmm/mD29A3SMSrb9cDZRXdx/HYCytXag2NKdZP2Lh1naILhn5UySnsuoB+OBwbgyeWlnNyPKZswN8/Y1s7Olim3bhMPhUxFz4v+CGNKA9EHhFy+9wwvH4iyt9bl5ZQsJx2HchZTjk3JNXuwYxEs4eKbBxh80YRnhrwfQRCK9+ak3eDNdxaoaiyuXNuPaaVKOJBMEJNMuf2n/jO5RHz81zsE7VuiNJpO2icWiBftRAQzlUrMj4Peb9vPnTzzWNET51uJabCegbyxDJq1rZ4tndnWScgw836XztlZSymBoLMn0inj+zHbqnSsAUC5TewRs7Uxx9xudLG8sY3G1RdpTJFxBxhckA8kzu4/i+ymcxBA9d11I0hfs7zjCknkzMWUuEZ9qFAxIYbNtXy+/2ZehPqb4ZkMFTqAYswOcQGf+MH/Y04dwh9jx09U06FJEhtj54X5WtM7/6hlCpWg/PMSN/+5melUxly2czdDYMIMJm5QTIhMxeO7dj9l+63KqTQ8hTFwlONzZzaKWpq8YUJ5nrSn3b+lk+5DDWaUWC+vjzGoso38gwasdPfz4/DOpUWAaDgKTrbs6OO/sOZi6RNJ1UgGjsC07YUjx1MZ32DIYwiqvoLnMYGZcMLd2GmWmoKIomu0DYAgMQ7Jpyw4uX7s8J45fDyB9IpE83LaX3YmAyrJSamJhZsRNGmJRSuKSmAGRUIy2Ta9x1WXrCEtdh8spPY4vp+o0Gcr1e8Z9yR9feZceN0KkvILS4iLKIxbTQi418RDvb32b6753ITFDInyHwAhN6QJ9BYB0MyKdTpNIJEilUtieyVv7jjAgI7hGlGLdekmPYSXGOPfsOURNj6KiOKWlpUSj0QK8538p0JTKgspkMgwPDDAyniKRcUkkM1hSErIs4uVlVJYYlFdWEosUYZpmwQ6tIZ3mluW+InvqENqf9BFH5BtQufafHlJ5BFLo5l/BzEy8+B+K7nzRZjcivwAAAABJRU5ErkJggg==", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 2}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "dell:networker", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "dell_networker", "title": "dell:networker", "description": "", "type": "customized", "parameters": [{"name": "nw_ip", "label": "IP Address:", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "xxx.xxx.xxx.xxx", "type": "text", "value": "192.168.180.150"}, {"name": "nw_port", "label": "Rest API Port:", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "9090", "type": "text", "value": "9090"}, {"name": "global_account", "label": "Global Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "nw_dropdown", "label": "Multiple Dropdown", "help_string": "", "required": false, "possible_values": [{"value": "alerts", "label": "alerts"}, {"value": "auditlogconfig", "label": "auditlogconfig"}, {"value": "backups", "label": "backups"}, {"label": "clients", "value": "clients"}, {"label": "cloudboostappliances", "value": "cloudboostappliances"}, {"label": "datadomainsystems", "value": "datadomainsystems"}, {"label": "devices", "value": "devices"}, {"label": "directives", "value": "directives"}, {"label": "inspect", "value": "inspect"}, {"label": "jobgroups", "value": "jobgroups"}, {"label": "jobindications", "value": "jobindications"}, {"label": "jobs", "value": "jobs"}, {"label": "labels", "value": "labels"}, {"label": "licenses", "value": "licenses"}, {"label": "lockbox", "value": "lockbox"}, {"label": "nasdevices", "value": "nasdevices"}, {"label": "notifications", "value": "notifications"}, {"label": "pools", "value": "pools"}, {"label": "probes", "value": "probes"}, {"label": "protectiongroups", "value": "protectiongroups"}, {"label": "protectionpolicies", "value": "protectionpolicies"}, {"label": "recoverapps", "value": "recoverapps"}, {"label": "recovers", "value": "recovers"}, {"label": "rules", "value": "rules"}, {"label": "schedules", "value": "schedules"}, {"label": "serverconfig", "value": "serverconfig"}, {"label": "servermessages", "value": "servermessages"}, {"label": "serverstatistics", "value": "serverstatistics"}, {"label": "sessions", "value": "sessions"}, {"label": "storagenodes", "value": "storagenodes"}, {"label": "tenants", "value": "tenants"}, {"label": "timepolicies", "value": "timepolicies"}, {"label": "usergroups", "value": "usergroups"}, {"label": "vmware", "value": "vmware"}, {"label": "volumes", "value": "volumes"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": "", "type": "multi_dropdownlist", "value": []}], "data_inputs_options": [{"type": "customized_var", "name": "nw_ip", "title": "IP Address:", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "xxx.xxx.xxx.xxx"}, {"type": "customized_var", "name": "nw_port", "title": "Rest API Port:", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "9090"}, {"type": "customized_var", "name": "global_account", "title": "Global Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "nw_dropdown", "title": "Multiple Dropdown", "description": "", "required_on_edit": false, "required_on_create": false, "possible_values": [{"value": "alerts", "label": "alerts"}, {"value": "auditlogconfig", "label": "auditlogconfig"}, {"value": "backups", "label": "backups"}, {"label": "clients", "value": "clients"}, {"label": "cloudboostappliances", "value": "cloudboostappliances"}, {"label": "datadomainsystems", "value": "datadomainsystems"}, {"label": "devices", "value": "devices"}, {"label": "directives", "value": "directives"}, {"label": "inspect", "value": "inspect"}, {"label": "jobgroups", "value": "jobgroups"}, {"label": "jobindications", "value": "jobindications"}, {"label": "jobs", "value": "jobs"}, {"label": "labels", "value": "labels"}, {"label": "licenses", "value": "licenses"}, {"label": "lockbox", "value": "lockbox"}, {"label": "nasdevices", "value": "nasdevices"}, {"label": "notifications", "value": "notifications"}, {"label": "pools", "value": "pools"}, {"label": "probes", "value": "probes"}, {"label": "protectiongroups", "value": "protectiongroups"}, {"label": "protectionpolicies", "value": "protectionpolicies"}, {"label": "recoverapps", "value": "recoverapps"}, {"label": "recovers", "value": "recovers"}, {"label": "rules", "value": "rules"}, {"label": "schedules", "value": "schedules"}, {"label": "serverconfig", "value": "serverconfig"}, {"label": "servermessages", "value": "servermessages"}, {"label": "serverstatistics", "value": "serverstatistics"}, {"label": "sessions", "value": "sessions"}, {"label": "storagenodes", "value": "storagenodes"}, {"label": "tenants", "value": "tenants"}, {"label": "timepolicies", "value": "timepolicies"}, {"label": "usergroups", "value": "usergroups"}, {"label": "vmware", "value": "vmware"}, {"label": "volumes", "value": "volumes"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": ""}], "code": "import datetime\nimport os\nimport json\nimport requests\nimport sys\nimport time\nfrom requests.auth import HTTPBasicAuth\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n\n    # Get input settings\n    global_account = helper.get_arg('global_account')\n    nw_user = global_account['username']\n    nw_password = global_account['password']\n    nw_ip = helper.get_arg('nw_ip')\n    nw_port = helper.get_arg('nw_port')\n    \n    # What to collect\n    nw_dropdown  = helper.get_arg('nw_dropdown')\n\n    # Starter log for error checking   \n    helper.log_info(\"START: Beginning Networker collection for: \" + nw_ip)\n    start = time.time()\n    try:\n        for option in nw_dropdown:\n            if option == 'alerts':\n                alerts_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/alerts'\n                alerts_response = requests.get(alerts_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                alerts_count = json.loads(alerts_response.text)['count']\n                helper.log_info(\"Networker alerts: FOUND \" + str(alerts_count) + \"alerts for: \" + nw_ip)\n                alerts_counter = 0\n\n                while alerts_counter < alerts_count:\n                    alerts_path = json.loads(alerts_response.text)['alerts'][alerts_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:alerts\", data=json.dumps(alerts_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker alerts: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker alerts: Cannot write alerts events for: \" + nw_ip)    \n                    alerts_counter += 1\n \n            if option == 'auditlogconfig':\n                auditlogconfig_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/auditlogconfig'\n                auditlogconfig_response = requests.get(auditlogconfig_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                helper.log_info(\"Networker auditlogconfig: FOUND auditlogconfig for: \" + nw_ip)\n                try:\n                    auditlogconfig_path = json.loads(auditlogconfig_response.text)\n                    event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:auditlogconfig\", data=json.dumps(auditlogconfig_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Networker auditlogconfig: Overview event data created for: \" + nw_ip)\n                except:\n                    helper.log_error(\"Networker auditlogconfig: Cannot write auditlogconfig events for: \" + nw_ip)   \n \n            if option == 'backups':\n                backups_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/backups'\n                backups_response = requests.get(backups_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                backups_count = json.loads(backups_response.text)['count']\n                helper.log_info(\"Networker backups: FOUND \" + str(backups_count) + \" backups for: \" + nw_ip)\n                backups_counter = 0\n\n                while backups_counter < backups_count:\n                    backups_path = json.loads(backups_response.text)['backups'][backups_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:backups\", data=json.dumps(backups_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker backups: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker backups: Cannot write backups events for: \" + nw_ip)    \n                    backups_counter += 1\n\n            if option == 'clients':\n                clients_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/clients'\n                clients_response = requests.get(clients_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                clients_count = json.loads(clients_response.text)['count']\n                helper.log_info(\"Networker clients: FOUND \" + str(clients_count) + \" clients for: \" + nw_ip)\n                clients_counter = 0\n\n                while clients_counter < clients_count:\n                    clients_path = json.loads(clients_response.text)['clients'][clients_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:clients\", data=json.dumps(clients_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker clients: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker clients: Cannot write clients events for: \" + nw_ip)    \n                    clients_counter += 1\n                    \n #########not tested########\n            if option == 'cloudboostappliances':\n                cloudboostappliances_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/cloudboostappliances'\n                cloudboostappliances_response = requests.get(cloudboostappliances_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                cloudboostappliances_count = json.loads(cloudboostappliances_response.text)['count']\n                helper.log_info(\"Networker cloudboostappliances: FOUND \" + str(cloudboostappliances_count) + \"cloudboostappliances for: \" + nw_ip)\n                cloudboostappliances_counter = 0\n\n                while cloudboostappliances_counter < cloudboostappliances_count:\n                    cloudboostappliances_path = json.loads(cloudboostappliances_response.text)['cloudboostappliances'][cloudboostappliances_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:cloudboostappliances\", data=json.dumps(cloudboostappliances_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker cloudboostappliances: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker cloudboostappliances: Cannot write cloudboostappliances events for: \" + nw_ip)    \n                    cloudboostappliances_counter += 1\n\n            if option == 'datadomainsystems':\n                datadomainsystems_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/datadomainsystems'\n                datadomainsystems_response = requests.get(datadomainsystems_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                datadomainsystems_count = json.loads(datadomainsystems_response.text)['count']\n                helper.log_info(\"Networker datadomainsystems: FOUND \" + str(datadomainsystems_count) + \" datadomainsystems for: \" + nw_ip)\n                datadomainsystems_counter = 0\n\n                while datadomainsystems_counter < datadomainsystems_count:\n                    datadomainsystems_path = json.loads(datadomainsystems_response.text)['dataDomainSystems'][datadomainsystems_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:datadomainsystems\", data=json.dumps(datadomainsystems_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker datadomainsystems: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker datadomainsystems: Cannot write datadomainsystems events for: \" + nw_ip)    \n                    datadomainsystems_counter += 1\n\n            if option == 'devices':\n                devices_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/devices'\n                devices_response = requests.get(devices_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                devices_count = json.loads(devices_response.text)['count']\n                helper.log_info(\"Networker devices: FOUND \" + str(devices_count) + \" devices for: \" + nw_ip)\n                devices_counter = 0\n\n                while devices_counter < devices_count:\n                    devices_path = json.loads(devices_response.text)['devices'][devices_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:devices\", data=json.dumps(devices_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker devices: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker devices: Cannot write devices events for: \" + nw_ip)    \n                    devices_counter += 1\n\n            if option == 'directives':\n                directives_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/directives'\n                directives_response = requests.get(directives_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                directives_count = json.loads(directives_response.text)['count']\n                helper.log_info(\"Networker directives: FOUND \" + str(directives_count) + \" directives for: \" + nw_ip)\n                directives_counter = 0\n\n                while directives_counter < directives_count:\n                    directives_path = json.loads(directives_response.text)['directives'][directives_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:directives\", data=json.dumps(directives_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker directives: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker directives: Cannot write directives events for: \" + nw_ip)    \n                    directives_counter += 1\n\n            if option == 'jobgroups':\n                jobgroups_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/jobgroups'\n                jobgroups_response = requests.get(jobgroups_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                jobgroups_count = json.loads(jobgroups_response.text)['count']\n                helper.log_info(\"Networker jobgroups: FOUND \" + str(jobgroups_count) + \" jobgroups for: \" + nw_ip)\n                jobgroups_counter = 0\n\n                while jobgroups_counter < jobgroups_count:\n                    jobgroups_path = json.loads(jobgroups_response.text)['jobs'][jobgroups_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:jobgroups\", data=json.dumps(jobgroups_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker jobgroups: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker jobgroups: Cannot write jobgroups events for: \" + nw_ip)    \n                    jobgroups_counter += 1\n\n            if option == 'jobindications':\n                jobindications_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/jobindications'\n                jobindications_response = requests.get(jobindications_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                jobindications_count = json.loads(jobindications_response.text)['count']\n                helper.log_info(\"Networker jobindications: FOUND \" + str(jobindications_count) + \" jobindications for: \" + nw_ip)\n                jobindications_counter = 0\n\n                while jobindications_counter < jobindications_count:\n                    jobindications_path = json.loads(jobindications_response.text)['jobIndications'][jobindications_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:jobindications\", data=json.dumps(jobindications_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker jobindications: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker jobindications: Cannot write jobindications events for: \" + nw_ip)    \n                    jobindications_counter += 1\n\n            if option == 'jobs':\n                jobs_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/jobs'\n                jobs_response = requests.get(jobs_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                jobs_count = json.loads(jobs_response.text)['count']\n                helper.log_info(\"Networker jobs: FOUND \" + str(jobs_count) + \" jobs for: \" + nw_ip)\n                jobs_counter = 0\n\n                while jobs_counter < jobs_count:\n                    jobs_path = json.loads(jobs_response.text)['jobs'][jobs_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:jobs\", data=json.dumps(jobs_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker jobs: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker jobs: Cannot write jobs events for: \" + nw_ip)    \n                    jobs_counter += 1\n\n            if option == 'labels':\n                labels_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/labels'\n                labels_response = requests.get(labels_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                labels_count = json.loads(labels_response.text)['count']\n                helper.log_info(\"Networker labels: FOUND \" + str(labels_count) + \" labels for: \" + nw_ip)\n                labels_counter = 0\n\n                while labels_counter < labels_count:\n                    labels_path = json.loads(labels_response.text)['labels'][labels_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:labels\", data=json.dumps(labels_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker labels: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker labels: Cannot write labels events for: \" + nw_ip)    \n                    labels_counter += 1\n\n            if option == 'licenses':\n                licenses_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/licenses'\n                licenses_response = requests.get(licenses_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                licenses_count = json.loads(licenses_response.text)['count']\n                helper.log_info(\"Networker licenses: FOUND \" + str(licenses_count) + \" licenses for: \" + nw_ip)\n                licenses_counter = 0\n\n                while licenses_counter < licenses_count:\n                    licenses_path = json.loads(licenses_response.text)['licenses'][licenses_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:licenses\", data=json.dumps(licenses_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker licenses: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker licenses: Cannot write licenses events for: \" + nw_ip)    \n                    licenses_counter += 1\n\n            if option == 'lockbox':\n                lockbox_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/lockbox'\n                lockbox_response = requests.get(lockbox_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                lockbox_count = json.loads(lockbox_response.text)['count']\n                helper.log_info(\"Networker lockbox: FOUND \" + str(lockbox_count) + \" lockbox for: \" + nw_ip)\n                lockbox_counter = 0\n\n                while lockbox_counter < lockbox_count:\n                    lockbox_path = json.loads(lockbox_response.text)['lockboxes'][lockbox_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:lockbox\", data=json.dumps(lockbox_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker lockbox: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker lockbox: Cannot write lockbox events for: \" + nw_ip)    \n                    lockbox_counter += 1\n###Test this one \n            if option == 'nasdevices':\n                nasdevices_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/nasdevices'\n                nasdevices_response = requests.get(nasdevices_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                nasdevices_count = json.loads(nasdevices_response.text)['count']\n                helper.log_info(\"Networker nasdevices: FOUND \" + str(nasdevices_count) + \" nasdevices for: \" + nw_ip)\n                nasdevices_counter = 0\n\n                while nasdevices_counter < nasdevices_count:\n                    nasdevices_path = json.loads(nasdevices_response.text)['nasDevices'][nasdevices_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:nasdevices\", data=json.dumps(nasdevices_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker nasdevices: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker nasdevices: Cannot write nasdevices events for: \" + nw_ip)    \n                    nasdevices_counter += 1\n\n            if option == 'notifications':\n                notifications_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/notifications'\n                notifications_response = requests.get(notifications_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                notifications_count = json.loads(notifications_response.text)['count']\n                helper.log_info(\"Networker notifications: FOUND \" + str(notifications_count) + \"notifications for: \" + nw_ip)\n                notifications_counter = 0\n\n                while notifications_counter < notifications_count:\n                    notifications_path = json.loads(notifications_response.text)['notifications'][notifications_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:notifications\", data=json.dumps(notifications_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker notifications: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker notifications: Cannot write notifications events for: \" + nw_ip)    \n                    notifications_counter += 1\n\n            if option == 'pools':\n                pools_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/pools'\n                pools_response = requests.get(pools_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                pools_count = json.loads(pools_response.text)['count']\n                helper.log_info(\"Networker pools: FOUND \" + str(pools_count) + \" pools for: \" + nw_ip)\n                pools_counter = 0\n\n                while pools_counter < pools_count:\n                    pools_path = json.loads(pools_response.text)['pools'][pools_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:pools\", data=json.dumps(pools_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker pools: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker pools: Cannot write pools events for: \" + nw_ip)    \n                    pools_counter += 1\n###test this one\n            if option == 'probes':\n                probes_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/probes'\n                probes_response = requests.get(probes_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                probes_count = json.loads(probes_response.text)['count']\n                helper.log_info(\"Networker probes: FOUND \" + str(probes_count) + \" probes for: \" + nw_ip)\n                probes_counter = 0\n\n                while probes_counter < probes_count:\n                    probes_path = json.loads(probes_response.text)['probes'][probes_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:probes\", data=json.dumps(probes_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker probes: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker probes: Cannot write probes events for: \" + nw_ip)    \n                    probes_counter += 1\n\n            if option == 'protectiongroups':\n                protectiongroups_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/protectiongroups'\n                protectiongroups_response = requests.get(protectiongroups_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                protectiongroups_count = json.loads(protectiongroups_response.text)['count']\n                helper.log_info(\"Networker protectiongroups: FOUND \" + str(protectiongroups_count) + \" protectiongroups for: \" + nw_ip)\n                protectiongroups_counter = 0\n\n                while protectiongroups_counter < protectiongroups_count:\n                    protectiongroups_path = json.loads(protectiongroups_response.text)['protectionGroups'][protectiongroups_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:protectiongroups\", data=json.dumps(protectiongroups_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker protectiongroups: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker protectiongroups: Cannot write protectiongroups events for: \" + nw_ip)    \n                    protectiongroups_counter += 1\n\n            if option == 'protectionpolicies':\n                protectionpolicies_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/protectionpolicies'\n                protectionpolicies_response = requests.get(protectionpolicies_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                protectionpolicies_count = json.loads(protectionpolicies_response.text)['count']\n                helper.log_info(\"Networker protectionpolicies: FOUND \" + str(protectionpolicies_count) + \" protectionpolicies for: \" + nw_ip)\n                protectionpolicies_counter = 0\n\n                while protectionpolicies_counter < protectionpolicies_count:\n                    protectionpolicies_path = json.loads(protectionpolicies_response.text)['protectionPolicies'][protectionpolicies_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:protectionpolicies\", data=json.dumps(protectionpolicies_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker protectionpolicies: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker protectionpolicies: Cannot write protectionpolicies events for: \" + nw_ip)    \n                    protectionpolicies_counter += 1\n###dive into this one. going to need subsearches\n            if option == 'recoverapps':\n                recoverappssap_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/recoverapps/saphana'\n                recoverappssql_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/recoverapps/sqlvdi'\n                recoverappssap_response = requests.get(recoverappssap_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                recoverappssql_response = requests.get(recoverappssql_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                recoverappssap_count = json.loads(recoverappssap_response.text)['count']\n                recoverappssql_count = json.loads(recoverappssql_response.text)['count']\n                helper.log_info(\"Networker recoverappssap: FOUND \" + str(recoverappssap_count) + \" recoverapps for: \" + nw_ip)\n                helper.log_info(\"Networker recoverappssql: FOUND \" + str(recoverappssql_count) + \" recoverapps for: \" + nw_ip)\n                recoverappssap_counter = 0\n                recoverappssql_counter = 0\n\n                while recoverappssap_counter < recoverappssap_count:\n                    recoverappssap_path = json.loads(recoverappssap_response.text)['recovers'][recoverappssap_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:recoverapps\", data=json.dumps(recoverappssap_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker recoverappssap: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker recoverappssap: Cannot write recoverapps events for: \" + nw_ip)    \n                    recoverappssap_counter += 1\n\n                while recoverappssql_counter < recoverappssql_count:\n                    recoverappssql_path = json.loads(recoverappssql_response.text)['recovers'][recoverappssql_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:recoverapps\", data=json.dumps(recoverappssql_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker recoverappssql: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker recoverappssql: Cannot write recoverapps events for: \" + nw_ip)    \n                    recoverappssql_counter += 1\n###test this one\n            if option == 'recovers':\n                recovers_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/recovers'\n                recovers_response = requests.get(recovers_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                recovers_count = json.loads(recovers_response.text)['count']\n                helper.log_info(\"Networker recovers: FOUND \" + str(recovers_count) + \" recovers for: \" + nw_ip)\n                recovers_counter = 0\n\n                while recovers_counter < recovers_count:\n                    recovers_path = json.loads(recovers_response.text)['recovers'][recovers_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:recovers\", data=json.dumps(recovers_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker recovers: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker recovers: Cannot write recovers events for: \" + nw_ip)    \n                    recovers_counter += 1\n###test this one\n            if option == 'rules':\n                rules_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/rules'\n                rules_response = requests.get(rules_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                rules_count = json.loads(rules_response.text)['count']\n                helper.log_info(\"Networker rules: FOUND \" + str(rules_count) + \" rules for: \" + nw_ip)\n                rules_counter = 0\n\n                while rules_counter < rules_count:\n                    rules_path = json.loads(rules_response.text)['rules'][rules_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:rules\", data=json.dumps(rules_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker rules: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker rules: Cannot write rules events for: \" + nw_ip)    \n                    rules_counter += 1\n\n            if option == 'schedules':\n                schedules_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/schedules'\n                schedules_response = requests.get(schedules_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                schedules_count = json.loads(schedules_response.text)['count']\n                helper.log_info(\"Networker schedules: FOUND \" + str(schedules_count) + \" schedules for: \" + nw_ip)\n                schedules_counter = 0\n\n                while schedules_counter < schedules_count:\n                    schedules_path = json.loads(schedules_response.text)['schedules'][schedules_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:schedules\", data=json.dumps(schedules_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker schedules: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker schedules: Cannot write schedules events for: \" + nw_ip)    \n                    schedules_counter += 1\n\n            if option == 'serverconfig':\n                serverconfig_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/serverconfig'\n                serverconfig_response = requests.get(serverconfig_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                serverconfig_count = json.loads(serverconfig_response.text)\n                helper.log_info(\"Networker serverconfig: FOUND \" + str(serverconfig_count) + \" serverconfig for: \" + nw_ip)\n\n                serverconfig_path = json.loads(serverconfig_response.text)\n                try:\n                    event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:serverconfig\", data=json.dumps(serverconfig_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Networker serverconfig: Overview event data created for: \" + nw_ip)\n                except:\n                    helper.log_error(\"Networker serverconfig: Cannot write serverconfig events for: \" + nw_ip)    \n\n            if option == 'servermessages':\n                servermessages_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/servermessages'\n                servermessages_response = requests.get(servermessages_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                servermessages_count = json.loads(servermessages_response.text)['count']\n                helper.log_info(\"Networker servermessages: FOUND \" + str(servermessages_count) + \" servermessages for: \" + nw_ip)\n                servermessages_counter = 0\n\n                while servermessages_counter < servermessages_count:\n                    servermessages_path = json.loads(servermessages_response.text)['serverMessages'][servermessages_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:servermessages\", data=json.dumps(servermessages_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker servermessages: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker servermessages: Cannot write servermessages events for: \" + nw_ip)    \n                    servermessages_counter += 1\n\n            if option == 'serverstatistics':\n                serverstatistics_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/serverstatistics'\n                serverstatistics_response = requests.get(serverstatistics_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                serverstatistics_count = json.loads(serverstatistics_response.text)\n                helper.log_info(\"Networker serverstatistics: FOUND \" + str(serverstatistics_count) + \" serverstatistics for: \" + nw_ip)\n\n                serverstatistics_path = json.loads(serverstatistics_response.text)\n                try:\n                    event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:serverstatistics\", data=json.dumps(serverstatistics_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Networker serverstatistics: Overview event data created for: \" + nw_ip)\n                except:\n                    helper.log_error(\"Networker serverstatistics: Cannot write serverstatistics events for: \" + nw_ip)    \n                    \n            if option == 'sessions':\n                sessions_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/sessions'\n                sessions_response = requests.get(sessions_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                sessions_count = json.loads(sessions_response.text)['count']\n                helper.log_info(\"Networker sessions: FOUND \" + str(sessions_count) + \" sessions for: \" + nw_ip)\n                sessions_counter = 0\n\n                while sessions_counter < sessions_count:\n                    sessions_path = json.loads(sessions_response.text)['sessions'][sessions_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:sessions\", data=json.dumps(sessions_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker sessions: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker sessions: Cannot write sessions events for: \" + nw_ip)    \n                    sessions_counter += 1\n\n            if option == 'storagenodes':\n                storagenodes_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/storagenodes'\n                storagenodes_response = requests.get(storagenodes_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                storagenodes_count = json.loads(storagenodes_response.text)['count']\n                helper.log_info(\"Networker storagenodes: FOUND \" + str(storagenodes_count) + \" storagenodes for: \" + nw_ip)\n                storagenodes_counter = 0\n\n                while storagenodes_counter < storagenodes_count:\n                    storagenodes_path = json.loads(storagenodes_response.text)['storageNodes'][storagenodes_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:storagenodes\", data=json.dumps(storagenodes_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker storagenodes: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker storagenodes: Cannot write storagenodes events for: \" + nw_ip)    \n                    storagenodes_counter += 1\n###test this one\n            if option == 'tenants':\n                tenants_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/tenants'\n                tenants_response = requests.get(tenants_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                tenants_count = json.loads(tenants_response.text)['count']\n                helper.log_info(\"Networker tenants: FOUND \" + str(tenants_count) + \" tenants for: \" + nw_ip)\n                tenants_counter = 0\n\n                while tenants_counter < tenants_count:\n                    tenants_path = json.loads(tenants_response.text)['tenants'][tenants_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:tenants\", data=json.dumps(tenants_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker tenants: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker tenants: Cannot write tenants events for: \" + nw_ip)    \n                    tenants_counter += 1\n\n            if option == 'timepolicies':\n                timepolicies_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/timepolicies'\n                timepolicies_response = requests.get(timepolicies_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                timepolicies_count = json.loads(timepolicies_response.text)['count']\n                helper.log_info(\"Networker timepolicies: FOUND \" + str(timepolicies_count) + \" timepolicies for: \" + nw_ip)\n                timepolicies_counter = 0\n\n                while timepolicies_counter < timepolicies_count:\n                    timepolicies_path = json.loads(timepolicies_response.text)['timepolicies'][timepolicies_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:timepolicies\", data=json.dumps(timepolicies_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker timepolicies: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker timepolicies: Cannot write timepolicies events for: \" + nw_ip)    \n                    timepolicies_counter += 1\n\n            if option == 'usergroups':\n                usergroups_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/usergroups'\n                usergroups_response = requests.get(usergroups_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                usergroups_count = json.loads(usergroups_response.text)['count']\n                helper.log_info(\"Networker usergroups: FOUND \" + str(usergroups_count) + \" usergroups for: \" + nw_ip)\n                usergroups_counter = 0\n\n                while usergroups_counter < usergroups_count:\n                    usergroups_path = json.loads(usergroups_response.text)['userGroups'][usergroups_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:usergroups\", data=json.dumps(usergroups_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker usergroups: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker usergroups: Cannot write usergroups events for: \" + nw_ip)    \n                    usergroups_counter += 1\n\n            if option == 'vmware':\n                #protected vms scan\n                protectedvms_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/vmware/protectedvms'\n                protectedvms_response = requests.get(protectedvms_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                protectedvms_count = json.loads(protectedvms_response.text)['count']\n                helper.log_info(\"Networker protectedvms: FOUND \" + str(protectedvms_count) + \" protectedvms for: \" + nw_ip)\n                protectedvms_counter = 0\n                while protectedvms_counter < protectedvms_count:\n                    protectedvms_path = json.loads(protectedvms_response.text)['vms'][protectedvms_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:protectedvms\", data=json.dumps(protectedvms_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker protectedvms: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker protectedvms: Cannot write protectedvms events for: \" + nw_ip)    \n                    protectedvms_counter += 1\n                \n                #vCenter scan\n                vcenters_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/vmware/vcenters'\n                vcenters_response = requests.get(vcenters_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                vcenters_count = json.loads(vcenters_response.text)['count']\n                helper.log_info(\"Networker vcenters: FOUND \" + str(vcenters_count) + \" vcenters for: \" + nw_ip)\n                vcenters_counter = 0\n\n                while vcenters_counter < vcenters_count:\n                    vcenters_path = json.loads(vcenters_response.text)['vCenters'][vcenters_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:vcenters\", data=json.dumps(vcenters_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker vcenters: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker vcenters: Cannot write vcenters events for: \" + nw_ip)    \n                    vcenters_counter += 1\n                \n                #individual vm scan\n                vms_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/vmware/vms'\n                vms_response = requests.get(vms_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                vms_count = json.loads(vms_response.text)['count']\n                helper.log_info(\"Networker vms: FOUND \" + str(vms_count) + \" vms for: \" + nw_ip)\n                vms_counter = 0\n\n                while vms_counter < vms_count:\n                    vms_path = json.loads(vms_response.text)['vms'][vms_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:vms\", data=json.dumps(vms_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker vms: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker vms: Cannot write vms events for: \" + nw_ip)    \n                    vms_counter += 1\n                \n                #vproxies scan\n                vproxies_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/vmware/vproxies'\n                vproxies_response = requests.get(vproxies_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                vproxies_count = json.loads(vproxies_response.text)['count']\n                helper.log_info(\"Networker vproxies: FOUND \" + str(vproxies_count) + \" vproxies for: \" + nw_ip)\n                vproxies_counter = 0\n\n                while vproxies_counter < vproxies_count:\n                    vproxies_path = json.loads(vproxies_response.text)['vProxies'][vproxies_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:vproxies\", data=json.dumps(vproxies_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker vproxies: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker vproxies: Cannot write vproxies events for: \" + nw_ip)    \n                    vproxies_counter += 1\n\n            if option == 'volumes':\n                volumes_url = 'https://' + nw_ip + ':' + nw_port + '/nwrestapi/v3/global/volumes'\n                volumes_response = requests.get(volumes_url, auth=HTTPBasicAuth(nw_user, nw_password),  verify=False)\n                volumes_count = json.loads(volumes_response.text)['count']\n                helper.log_info(\"Networker volumes: FOUND \" + str(volumes_count) + \" volumes for: \" + nw_ip)\n                volumes_counter = 0\n\n                while volumes_counter < volumes_count:\n                    volumes_path = json.loads(volumes_response.text)['volumes'][volumes_counter]\n                    try:\n                        event = helper.new_event(host=nw_ip, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:networker:volumes\", data=json.dumps(volumes_path), done=True, unbroken=False)\n                        ew.write_event(event)\n                        helper.log_info(\"Networker volumes: Overview event data created for: \" + nw_ip)\n                    except:\n                        helper.log_error(\"Networker volumes: Cannot write volumes events for: \" + nw_ip)    \n                    volumes_counter += 1\n\n    except:\n        helper.log_error(\"Dell EMC Networker: URL not found for: \" + nw_ip)\n        \n    # Finish up\n    helper.log_info(\"FINISH: Ending collection for: \" + nw_ip)\n    end_time = round(time.time()-start,2)\n    helper.log_info(\"FINISH: Dell EMC Networker collection took: \" + str(end_time) + \" secs to collect data for: \" + nw_ip)", "customized_options": [{"name": "nw_ip", "value": "192.168.180.150"}, {"name": "nw_port", "value": "9090"}, {"name": "global_account", "value": "account0"}, {"name": "nw_dropdown", "value": []}], "uuid": "972d3759da154c9d9a2bc9cd566ced40", "sample_count": 0}]}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"dell:networker": {"metadata": {"event_count": 0, "data_input_name": "dell_networker", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1595822573_93", "progress": 1.0}}